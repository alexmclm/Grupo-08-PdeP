import BarrileteCosmico.*
import Localidad.*
import Usuario.*
import MedioDeTransporte.*
import Viaje.*

describe "instancias de destinos, usuarios , medios de tranporte , viajes y barrilete cosmico"{
	const garlicSea
	const silversSea
	const lastToninas
	const goodAiris
	//Usuarios
	const macri
	const albertoK
	const elOsoRulo
	const pabloHari
	const macron
	const espert
	// MedioDeTransporte
	const flechaBus
	const flyBondi
	const thm
		
	
	const BarrileteCosmico 
	
	
	//destinosPersonalizos
	const playa
	const montania
	const cuidadHistorica
	//decidi instanciar tanto Localidad como usuario con Km en 0 , para ver simplemente jajaj
		fixture{
			garlicSea = new Localidad("Garlic Sea", #{"Caña de pescar", "Piloto"},2500,100)
			silversSea = new Localidad("Silver´s Sea",#{"Protector Solar", "Equipo de Buceo"},1350,250)
			lastToninas = new Localidad("Last Toninas",#{"Vacuna Gripal", "Vacuna B", "Necronomicon"},3500,300)
			goodAiris = new Localidad("Good Airis",#{"Cerveza", "Protector Solar"},1500,400)
			
			pabloHari = new Usuario("pabloHari",[lastToninas,goodAiris],[],1500,garlicSea)
			albertoK = new Usuario("el alberto del pueblo",[],[],2000,silversSea)
			elOsoRulo = new Usuario("No rulo no hagas eso_ok",[],[],2500,lastToninas)
			macri = new Usuario("The Cat",[],[],10000,silversSea)
		
			
			//lo hice clase para hacer este chiche jajajaaj
			BarrileteCosmico = new BarrileteCosmico(#{garlicSea,silversSea,lastToninas,goodAiris},#{},#{})
				
			//transportes
			flechaBus = new Micro(10,100,10)
			flyBondi = new Avion(100,10,100)
			thm = new Tren (100,100,100)
			
			//perfiles Usuario
			macron = new Empresario("The Cat",[],[],10000,silversSea)
			espert = new Estudiante("No rulo no hagas eso_ok",[],[],2500,lastToninas)
	
			//Destinos Personalizados
			// no se por que la palabra personalizado, me hace creer que se refiere a objetos.........
			playa = new Playa("playa",#{},2000,100)
			montania = new Montanias("montania",#{},1000,50)
			cuidadHistorica = new CuidadHistorica("Le Cidad",#{},500,80)
//re- acomode algunas instancias del fxture por que tiraba error 
//ahora con esto deberia no romper, al menos aca			
		}	
		

test "Destinos importantes de Barrilete Cosmico : Garlic´s Sea" {
	var destinos=BarrileteCosmico.destinosImportantes()
	assert.equals(#{garlicSea,lastToninas},destinos)
	//assert.equals("Garlic´s Sea",destinos.nombre()) son 2 destinos importantes

}
test "Al aplicar descuento del 25% a 'Last Toninas', su precio es de $2625"{
	lastToninas.precioConDescuento(25)
	assert.equals(2625,lastToninas.precio())
}
test "Al aplicar descuento del 25% a 'Last Toninas', agregar al equipaje 'Certificado De Descuento' "{
	lastToninas.precioConDescuento(25)
	assert.that(lastToninas.equipaje().contains("Certificado De Descuento"))
}
test "Silver´s Sea no es un sitio Peligroso "{
	
	assert.notThat(silversSea.esPeligroso())

}
test "Aplicar descuento del 15% a todos los destinos de Barrilete Cosmico-'Garlic Sea debe quedar con $2125'"{
	BarrileteCosmico.darDescuento(15)
	assert.equals(2125,garlicSea.precio()) 
}
test "Aplicar descuento del 15% a todos los destinos de Barrilete Cosmico-'Silver Sea' debe quedar con $1147,5'" {
	BarrileteCosmico.darDescuento(15)
	assert.equals(1147.5,silversSea.precio()) 
}
test "Aplicar descuento del 15% a todos los destinos de Barrilete Cosmico-'Last Toninas' debe quedar con $2975'" {
	BarrileteCosmico.darDescuento(15)
	assert.equals(2975,lastToninas.precio()) 
}
test "Aplicar descuento del 15% a todos los destinos de Barrilete Cosmico-'Good Airis debe quedar con $1275'" {
	BarrileteCosmico.darDescuento(15)
	assert.equals(1275,goodAiris.precio()) 
}
test "Destinos mas peligrosos, debe ser LastToninas"{

	assert.equals(#{lastToninas},BarrileteCosmico.lugaresPeligrosos())
	//no hice el metodo
}
test "Barrilete Cosmico es una empresa Extrema, si lo es"{
	
	assert.that(BarrileteCosmico.esExtrema())
}
test "Carta de Destinos de Barrilete Cosmico"{

	assert.equals(#{"Garlic Sea","Silver´s Sea","Last Toninas","Good Airis"},BarrileteCosmico.cartasDeDestinos().asSet())
	
}
/*
test "Millas de Pablo Harri, 500KM"{
	assert.equals(500,pabloHari.kilometrosRecorridos())
}
test "Pablo Hari puede volar a Silver´s Sea "{
	assert.equals(true,pabloHari.alcanzaDinero(silversSea))
}
test "Pablo Hari vuela a Silver´s Sea"{
	pabloHari.volarA(silversSea)
	assert.equals(150,pabloHari.plataQueTiene()) 
	}
 
*/
 /* PARTE 2 : NO SE QUE TEST PROBAR JAJAJAJAAJ */
 test " la distancia entre  garlic sea y last toninas son de 200 km" {
 	
 	assert.equals(200,garlicSea.distanciasCon(lastToninas))
 }
test " distancia entre garlic sea y silversSea son de 150km" {
	assert.equals(150,garlicSea.distanciasCon(silversSea))
}
test "distancia entre garlicSea y good airis son de 300km "{
	assert.equals(300,garlicSea.distanciasCon(goodAiris))
}
test "distancia entre Sirvers Sea y Last Toninas son de 50km"{
	assert.equals(50,silversSea.distanciasCon(lastToninas))
}
test "distancia entre Silvers Sea y Good Airis son de 150km"{
	assert.equals(150,silversSea.distanciasCon(goodAiris))
}
test "distancia entre last Toninas con Good Airis son de 100km"{
	assert.equals(100,lastToninas.distanciasCon(goodAiris))
}

test "alberto va de gira con tranporte galacticus , su gira es solo por lastToninas, precio: xxxx "{
	assert.that(true)
}
//usuario viaje y su localidad de origen sea el de destino
//tema de los costos, transportes , va cambiando a los viajes
//
test "Alberto no puede volar a lastToninas y debe largar una excepcion que diga que le duelen los bolsillos"{
	assert.throwsExceptionWithMessage("me duelen los bolsillos",{albertoK.volarA(lastToninas)})
}

test "Macri viaja a lastToninas y su localidad de origen cambia"{
	macri.volarA(lastToninas)
	assert.equals(lastToninas,macri.localidadOrigen())	
}

test "El precio de flechaBus es de 15"{
	assert.equals(15,flechaBus.precioPorKm())
}
// aca arranca la deseada y ultima , por favor, parte del tp3 jajajajaaj	
test "el precio por km usando medio de transporte FlyBondi teniendo en cuenta que tiene 4 turbinas y producen 200Joules de potencia es de......."{
	flyBondi.cantidadTurbinas(4)
	flyBondi.nivelImpulsoPorTurbina(200)
	assert.equals(800,flyBondi.precioPorKm())	
}	
test "el precio por km usando medio de transporte thm teniendo en cuenta que se recorrio 10 millas"{
	thm.millas(10)
	assert.equals(37014.32,thm.precioPorKm())
}	
test "el precio por km usando meiod de transporte flecha bus es de 5000"{
	assert.equals(5000,flechaBus.precioPorKm())
}	
test "las playas no son peligrosas"{
	assert.notThat(playa.esPeligrosa())
}
test " las montanias con altura de 15000m es peligrosa si no tiene asistencia de seguro"{

	assert.that(montania.esPeligroso())
}
test "las montanias siempre son destacadas"{
	assert.that(montania.esDestacado())
}
test "hay 3 museos en la cuidades historicas en los cuales no se destaca "{
	cuidadHistorica.museos(#{"museo de ana frank","museo de los masones","museo de la utn?"})
	assert.that(cuidadHistorica.esDestacado())
 }
}

